;  LST file generated by mikroListExporter - v.2.0 
; Date/Time: 02.03.2024 15:02:08
;----------------------------------------------

;Address Opcode 	ASM
0x0000	0x0203E1  	LJMP 993
0x0003	0x020000  	LJMP 0
0x0006	0x00      	NOP
0x0007	0x00      	NOP
0x0008	0x00      	NOP
0x0009	0x00      	NOP
0x000A	0x00      	NOP
0x000B	0x020000  	LJMP 0
0x000E	0x00      	NOP
0x000F	0x00      	NOP
0x0010	0x00      	NOP
0x0011	0x00      	NOP
0x0012	0x00      	NOP
0x0013	0x020000  	LJMP 0
0x0016	0x00      	NOP
0x0017	0x00      	NOP
0x0018	0x00      	NOP
0x0019	0x00      	NOP
0x001A	0x00      	NOP
0x001B	0x020000  	LJMP 0
0x001E	0x00      	NOP
0x001F	0x00      	NOP
0x0020	0x00      	NOP
0x0021	0x00      	NOP
0x0022	0x00      	NOP
0x0023	0x020000  	LJMP 0
_translate:
;Drv.c,84 :: 		unsigned char translate(unsigned char c){
;Drv.c,85 :: 		switch (c){
0x0026	0x8018    	SJMP L_translate48
;Drv.c,93 :: 		case 'Æ': return 0xA3;
L_translate50:
0x0028	0x78A3    	MOV R0, #163
0x002A	0x22      	RET
;Drv.c,94 :: 		case 'Ç': return 0xA4;
L_translate51:
0x002B	0x78A4    	MOV R0, #164
0x002D	0x22      	RET
;Drv.c,97 :: 		case 'Ê': return 'K';
L_translate52:
0x002E	0x784B    	MOV R0, #75
0x0030	0x22      	RET
;Drv.c,126 :: 		case 'æ': return 0xB6;
L_translate53:
0x0031	0x78B6    	MOV R0, #182
0x0033	0x22      	RET
;Drv.c,127 :: 		case 'ç': return 0xB7;
L_translate54:
0x0034	0x78B7    	MOV R0, #183
0x0036	0x22      	RET
;Drv.c,136 :: 		case 'ð': return 'p';
L_translate55:
0x0037	0x7870    	MOV R0, #112
0x0039	0x22      	RET
;Drv.c,137 :: 		case 'ñ': return 'c';
L_translate56:
0x003A	0x7863    	MOV R0, #99
0x003C	0x22      	RET
;Drv.c,152 :: 		default: return c;
L_translate57:
0x003D	0xA815    	MOV R0, FARG_translate_c
0x003F	0x22      	RET
;Drv.c,153 :: 		}
L_translate48:
0x0040	0xE515    	MOV A, FARG_translate_c
0x0042	0x64C6    	XRL A, #198
0x0044	0x60E2    	JZ L_translate50
0x0046	0xE515    	MOV A, FARG_translate_c
0x0048	0x64C7    	XRL A, #199
0x004A	0x60DF    	JZ L_translate51
0x004C	0xE515    	MOV A, FARG_translate_c
0x004E	0x64CA    	XRL A, #202
0x0050	0x60DC    	JZ L_translate52
0x0052	0xE515    	MOV A, FARG_translate_c
0x0054	0x64E6    	XRL A, #230
0x0056	0x60D9    	JZ L_translate53
0x0058	0xE515    	MOV A, FARG_translate_c
0x005A	0x64E7    	XRL A, #231
0x005C	0x60D6    	JZ L_translate54
0x005E	0xE515    	MOV A, FARG_translate_c
0x0060	0x64F0    	XRL A, #240
0x0062	0x60D3    	JZ L_translate55
0x0064	0xE515    	MOV A, FARG_translate_c
0x0066	0x64F1    	XRL A, #241
0x0068	0x60D0    	JZ L_translate56
0x006A	0x80D1    	SJMP L_translate57
;Drv.c,154 :: 		}
0x006C	0x22      	RET
; end of _translate
_outd:
;Drv.c,195 :: 		void outd(unsigned char c){
;Drv.c,197 :: 		c=translate(c);
0x006D	0x851115  	MOV FARG_translate_c, FARG_outd_c+0
0x0070	0x1126    	ACALL _translate
0x0072	0x850011  	MOV FARG_outd_c, 0
;Drv.c,198 :: 		RS = 1;
0x0075	0xD3      	SETB C
0x0076	0xE5B0    	MOV A, P3_6_bit
0x0078	0x92E6    	MOV #224.B6, C
0x007A	0xF5B0    	MOV P3_6_bit, A
;Drv.c,199 :: 		DB = c;
0x007C	0x8500A0  	MOV P2, 0
;Drv.c,200 :: 		E = 1;
0x007F	0xD3      	SETB C
0x0080	0xE5B0    	MOV A, P3_7_bit
0x0082	0x92E7    	MOV #224.B7, C
0x0084	0xF5B0    	MOV P3_7_bit, A
;Drv.c,201 :: 		E = 2;
0x0086	0xC3      	CLR C
0x0087	0xE5B0    	MOV A, P3_7_bit
0x0089	0x92E7    	MOV #224.B7, C
0x008B	0xF5B0    	MOV P3_7_bit, A
;Drv.c,202 :: 		for (i=0; i<21; i++);
0x008D	0x751200  	MOV outd_i_L0, #0
L_outd70:
0x0090	0xC3      	CLR C
0x0091	0xE512    	MOV A, outd_i_L0
0x0093	0x9415    	SUBB A, #21
0x0095	0x5004    	JNC L_outd71
0x0097	0x0512    	INC outd_i_L0
0x0099	0x80F5    	SJMP L_outd70
L_outd71:
;Drv.c,203 :: 		}
0x009B	0x22      	RET
; end of _outd
_DelayMs:
;mikroC project.c,38 :: 		void DelayMs(unsigned int m) {
;mikroC project.c,40 :: 		for (ms = 0; ms != m; ms++) {
0x009C	0x755400  	MOV _ms, #0
L_DelayMs0:
0x009F	0xE554    	MOV A, _ms
0x00A1	0x6511    	XRL A, FARG_DelayMs_m
0x00A3	0x7003    	JNZ L__DelayMs95
0x00A5	0xE4      	CLR A
0x00A6	0x6512    	XRL A, FARG_DelayMs_m+1
L__DelayMs95:
0x00A8	0x6018    	JZ L_DelayMs1
;mikroC project.c,41 :: 		for (a = 0; a != 120; a++);
0x00AA	0x751300  	MOV DelayMs_a_L0, #0
L_DelayMs3:
0x00AD	0xE513    	MOV A, DelayMs_a_L0
0x00AF	0x6478    	XRL A, #120
0x00B1	0x6004    	JZ L_DelayMs4
0x00B3	0x0513    	INC DelayMs_a_L0
0x00B5	0x80F6    	SJMP L_DelayMs3
L_DelayMs4:
;mikroC project.c,42 :: 		WMCON.WDTRST = 1;
0x00B7	0xD3      	SETB C
0x00B8	0xE596    	MOV A, WMCON
0x00BA	0x92E1    	MOV #224.B1, C
0x00BC	0xF596    	MOV WMCON, A
;mikroC project.c,40 :: 		for (ms = 0; ms != m; ms++) {
0x00BE	0x0554    	INC _ms
;mikroC project.c,43 :: 		}
0x00C0	0x80DD    	SJMP L_DelayMs0
L_DelayMs1:
;mikroC project.c,44 :: 		}
0x00C2	0x22      	RET
; end of _DelayMs
_outcw:
;Drv.c,183 :: 		void outcw(unsigned char c){
;Drv.c,186 :: 		RS = 0;
0x00C3	0xC3      	CLR C
0x00C4	0xE5B0    	MOV A, P3_6_bit
0x00C6	0x92E6    	MOV #224.B6, C
0x00C8	0xF5B0    	MOV P3_6_bit, A
;Drv.c,187 :: 		DB = c;
0x00CA	0x8511A0  	MOV P2, FARG_outcw_c+0
;Drv.c,188 :: 		E = 1;
0x00CD	0xD3      	SETB C
0x00CE	0xE5B0    	MOV A, P3_7_bit
0x00D0	0x92E7    	MOV #224.B7, C
0x00D2	0xF5B0    	MOV P3_7_bit, A
;Drv.c,189 :: 		E = 2;
0x00D4	0xC3      	CLR C
0x00D5	0xE5B0    	MOV A, P3_7_bit
0x00D7	0x92E7    	MOV #224.B7, C
0x00D9	0xF5B0    	MOV P3_7_bit, A
;Drv.c,190 :: 		for (i=0; i<20; i++);
0x00DB	0x751200  	MOV outcw_i_L0, #0
L_outcw61:
0x00DE	0xC3      	CLR C
0x00DF	0xE512    	MOV A, outcw_i_L0
0x00E1	0x9414    	SUBB A, #20
0x00E3	0x5004    	JNC L_outcw62
0x00E5	0x0512    	INC outcw_i_L0
0x00E7	0x80F5    	SJMP L_outcw61
L_outcw62:
;Drv.c,191 :: 		if (c==1||c==2||c==3)
0x00E9	0xE511    	MOV A, FARG_outcw_c
0x00EB	0x6401    	XRL A, #1
0x00ED	0x600E    	JZ L__outcw73
0x00EF	0xE511    	MOV A, FARG_outcw_c
0x00F1	0x6402    	XRL A, #2
0x00F3	0x6008    	JZ L__outcw73
0x00F5	0xE511    	MOV A, FARG_outcw_c
0x00F7	0x6403    	XRL A, #3
0x00F9	0x6002    	JZ L__outcw73
0x00FB	0x801F    	SJMP L_outcw66
L__outcw73:
;Drv.c,192 :: 		for (j=0; j<500; j++);
0x00FD	0x751300  	MOV outcw_j_L0, #0
0x0100	0x751400  	MOV outcw_j_L0+1, #0
L_outcw67:
0x0103	0xC3      	CLR C
0x0104	0xE513    	MOV A, outcw_j_L0
0x0106	0x94F4    	SUBB A, #244
0x0108	0xE514    	MOV A, outcw_j_L0+1
0x010A	0x9401    	SUBB A, #1
0x010C	0x500E    	JNC L_outcw68
0x010E	0x7401    	MOV A, #1
0x0110	0x2513    	ADD A, outcw_j_L0
0x0112	0xF513    	MOV outcw_j_L0, A
0x0114	0x7400    	MOV A, #0
0x0116	0x3514    	ADDC A, outcw_j_L0+1
0x0118	0xF514    	MOV outcw_j_L0+1, A
0x011A	0x80E7    	SJMP L_outcw67
L_outcw68:
L_outcw66:
;Drv.c,193 :: 		}
0x011C	0x22      	RET
; end of _outcw
_ScanKbd:
;Drv.c,59 :: 		unsigned char ScanKbd(void) {
;Drv.c,61 :: 		unsigned char kp = 0;
0x011D	0x750A00  	MOV ScanKbd_kp_L0, #0
;Drv.c,62 :: 		P0 = P0&0x1F|0xC0;
0x0120	0xE580    	MOV A, P0
0x0122	0x541F    	ANL A, #31
0x0124	0xF8      	MOV R0, A
0x0125	0x44C0    	ORL A, #192
0x0127	0xF580    	MOV P0, A
;Drv.c,63 :: 		for(i=0;i<10;i++);
0x0129	0x750B00  	MOV ScanKbd_i_L0, #0
L_ScanKbd18:
0x012C	0xC3      	CLR C
0x012D	0xE50B    	MOV A, ScanKbd_i_L0
0x012F	0x940A    	SUBB A, #10
0x0131	0x5004    	JNC L_ScanKbd19
0x0133	0x050B    	INC ScanKbd_i_L0
0x0135	0x80F5    	SJMP L_ScanKbd18
L_ScanKbd19:
;Drv.c,64 :: 		if (!P1_0_bit) kp = '7';
0x0137	0x209005  	JB P1_0_bit, L_ScanKbd21
0x013A	0x750A37  	MOV ScanKbd_kp_L0, #55
0x013D	0x8016    	SJMP L_ScanKbd22
L_ScanKbd21:
;Drv.c,65 :: 		else if (!P1_1_bit) kp = '4';
0x013F	0x209105  	JB P1_1_bit, L_ScanKbd23
0x0142	0x750A34  	MOV ScanKbd_kp_L0, #52
0x0145	0x800E    	SJMP L_ScanKbd24
L_ScanKbd23:
;Drv.c,66 :: 		else if (!P1_2_bit) kp = '1';
0x0147	0x209205  	JB P1_2_bit, L_ScanKbd25
0x014A	0x750A31  	MOV ScanKbd_kp_L0, #49
0x014D	0x8006    	SJMP L_ScanKbd26
L_ScanKbd25:
;Drv.c,67 :: 		else if (!P1_3_bit) kp = '#';
0x014F	0x209303  	JB P1_3_bit, L_ScanKbd27
0x0152	0x750A23  	MOV ScanKbd_kp_L0, #35
L_ScanKbd27:
L_ScanKbd26:
L_ScanKbd24:
L_ScanKbd22:
;Drv.c,68 :: 		P0 = P0&0x1F|0xA0;
0x0155	0xE580    	MOV A, P0
0x0157	0x541F    	ANL A, #31
0x0159	0xF8      	MOV R0, A
0x015A	0x44A0    	ORL A, #160
0x015C	0xF580    	MOV P0, A
;Drv.c,69 :: 		for(i=0;i<10;i++);
0x015E	0x750B00  	MOV ScanKbd_i_L0, #0
L_ScanKbd28:
0x0161	0xC3      	CLR C
0x0162	0xE50B    	MOV A, ScanKbd_i_L0
0x0164	0x940A    	SUBB A, #10
0x0166	0x5004    	JNC L_ScanKbd29
0x0168	0x050B    	INC ScanKbd_i_L0
0x016A	0x80F5    	SJMP L_ScanKbd28
L_ScanKbd29:
;Drv.c,70 :: 		if (!P1_0_bit) kp = '8';
0x016C	0x209005  	JB P1_0_bit, L_ScanKbd31
0x016F	0x750A38  	MOV ScanKbd_kp_L0, #56
0x0172	0x8016    	SJMP L_ScanKbd32
L_ScanKbd31:
;Drv.c,71 :: 		else if (!P1_1_bit) kp = '5';
0x0174	0x209105  	JB P1_1_bit, L_ScanKbd33
0x0177	0x750A35  	MOV ScanKbd_kp_L0, #53
0x017A	0x800E    	SJMP L_ScanKbd34
L_ScanKbd33:
;Drv.c,72 :: 		else if (!P1_2_bit) kp = '2';
0x017C	0x209205  	JB P1_2_bit, L_ScanKbd35
0x017F	0x750A32  	MOV ScanKbd_kp_L0, #50
0x0182	0x8006    	SJMP L_ScanKbd36
L_ScanKbd35:
;Drv.c,73 :: 		else if (!P1_3_bit) kp = '0';
0x0184	0x209303  	JB P1_3_bit, L_ScanKbd37
0x0187	0x750A30  	MOV ScanKbd_kp_L0, #48
L_ScanKbd37:
L_ScanKbd36:
L_ScanKbd34:
L_ScanKbd32:
;Drv.c,74 :: 		P0 = P0&0x1F|0x60;
0x018A	0xE580    	MOV A, P0
0x018C	0x541F    	ANL A, #31
0x018E	0xF8      	MOV R0, A
0x018F	0x4460    	ORL A, #96
0x0191	0xF580    	MOV P0, A
;Drv.c,75 :: 		for(i=0;i<10;i++);
0x0193	0x750B00  	MOV ScanKbd_i_L0, #0
L_ScanKbd38:
0x0196	0xC3      	CLR C
0x0197	0xE50B    	MOV A, ScanKbd_i_L0
0x0199	0x940A    	SUBB A, #10
0x019B	0x5004    	JNC L_ScanKbd39
0x019D	0x050B    	INC ScanKbd_i_L0
0x019F	0x80F5    	SJMP L_ScanKbd38
L_ScanKbd39:
;Drv.c,76 :: 		if (!P1_0_bit) kp = '9';
0x01A1	0x209005  	JB P1_0_bit, L_ScanKbd41
0x01A4	0x750A39  	MOV ScanKbd_kp_L0, #57
0x01A7	0x8016    	SJMP L_ScanKbd42
L_ScanKbd41:
;Drv.c,77 :: 		else if (!P1_1_bit) kp = '6';
0x01A9	0x209105  	JB P1_1_bit, L_ScanKbd43
0x01AC	0x750A36  	MOV ScanKbd_kp_L0, #54
0x01AF	0x800E    	SJMP L_ScanKbd44
L_ScanKbd43:
;Drv.c,78 :: 		else if (!P1_2_bit) kp = '3';
0x01B1	0x209205  	JB P1_2_bit, L_ScanKbd45
0x01B4	0x750A33  	MOV ScanKbd_kp_L0, #51
0x01B7	0x8006    	SJMP L_ScanKbd46
L_ScanKbd45:
;Drv.c,79 :: 		else if (!P1_3_bit) kp = 'e';
0x01B9	0x209303  	JB P1_3_bit, L_ScanKbd47
0x01BC	0x750A65  	MOV ScanKbd_kp_L0, #101
L_ScanKbd47:
L_ScanKbd46:
L_ScanKbd44:
L_ScanKbd42:
;Drv.c,80 :: 		return kp;
0x01BF	0xA80A    	MOV R0, ScanKbd_kp_L0
;Drv.c,81 :: 		}
0x01C1	0x22      	RET
; end of _ScanKbd
_clear_lcd:
;Drv.c,176 :: 		void clear_lcd(void){
;Drv.c,178 :: 		outcw(0x80);
0x01C2	0x751180  	MOV FARG_outcw_c, #128
0x01C5	0x11C3    	ACALL _outcw
;Drv.c,179 :: 		for(i=0;i<16;i++)
0x01C7	0x750A00  	MOV clear_lcd_i_L0, #0
L_clear_lcd58:
0x01CA	0xC3      	CLR C
0x01CB	0xE50A    	MOV A, clear_lcd_i_L0
0x01CD	0x9410    	SUBB A, #16
0x01CF	0x5009    	JNC L_clear_lcd59
;Drv.c,180 :: 		outd(' ');
0x01D1	0x751120  	MOV FARG_outd_c, #32
0x01D4	0x116D    	ACALL _outd
;Drv.c,179 :: 		for(i=0;i<16;i++)
0x01D6	0x050A    	INC clear_lcd_i_L0
;Drv.c,180 :: 		outd(' ');
0x01D8	0x80F0    	SJMP L_clear_lcd58
L_clear_lcd59:
;Drv.c,181 :: 		}
0x01DA	0x22      	RET
; end of _clear_lcd
_init:
;Drv.c,5 :: 		void init(void){
;Drv.c,9 :: 		WMCON = 0b11111001;  // Enable WatchDog Timer, set prescaller bits to 111
0x01DB	0x7596F9  	MOV WMCON, #249
;Drv.c,12 :: 		WMCON|=0x08;  // internal EEPROM enable
0x01DE	0x439608  	ORL WMCON, #8
;Drv.c,13 :: 		WMCON&=0xfb;  // DPTR = DP0
0x01E1	0x5396FB  	ANL WMCON, #251
;Drv.c,16 :: 		PCON |= 0x80;        // SMOD=1
0x01E4	0x438780  	ORL PCON, #128
;Drv.c,17 :: 		SCON = 0x72;        // mode 1, receiver enable
0x01E7	0x759872  	MOV SCON, #114
;Drv.c,18 :: 		TMOD = 0x22;        //Timers 0&1 are 8-bit timers with auto-reload
0x01EA	0x758922  	MOV TMOD, #34
;Drv.c,19 :: 		TH1   = 0xF5;        // 9600 baud at 20 MHz
0x01ED	0x758DF5  	MOV TH1, #245
;Drv.c,20 :: 		ES_bit = 0;
0x01F0	0xC2AC    	CLR ES_bit
;Drv.c,23 :: 		TF1_bit = 0;       // Ensure that Timer1 interrupt flag is cleared
0x01F2	0xC28F    	CLR TF1_bit
;Drv.c,24 :: 		ET1_bit = 1;       // Enable Timer1 interrupt
0x01F4	0xD2AB    	SETB ET1_bit
;Drv.c,25 :: 		EA_bit  = 1;       // Set global interrupt enable
0x01F6	0xD2AF    	SETB EA_bit
;Drv.c,27 :: 		GATE1_bit = 0;     // Clear this flag to enable Timer1 whenever TR1 bit is set.
0x01F8	0xC3      	CLR C
0x01F9	0xE589    	MOV A, GATE1_bit
0x01FB	0x92E7    	MOV #224.B7, C
0x01FD	0xF589    	MOV GATE1_bit, A
;Drv.c,28 :: 		C_T1_bit  = 0;     // Set Timer operation: Timer1 counts the divided-down systam clock.
0x01FF	0xC3      	CLR C
0x0200	0xE589    	MOV A, C_T1_bit
0x0202	0x92E6    	MOV #224.B6, C
0x0204	0xF589    	MOV C_T1_bit, A
;Drv.c,29 :: 		M11_bit   = 0;     // M11_M01 = 01    =>   Mode 1(16-bit Timer/Counter)
0x0206	0xC3      	CLR C
0x0207	0xE589    	MOV A, M11_bit
0x0209	0x92E5    	MOV #224.B5, C
0x020B	0xF589    	MOV M11_bit, A
;Drv.c,30 :: 		M01_bit   = 1;
0x020D	0xD3      	SETB C
0x020E	0xE589    	MOV A, M01_bit
0x0210	0x92E4    	MOV #224.B4, C
0x0212	0xF589    	MOV M01_bit, A
;Drv.c,32 :: 		TR1_bit = 0;       // Turn off Timer1
0x0214	0xC28E    	CLR TR1_bit
;Drv.c,33 :: 		TH1 = 0xFC;        // Reset Timer1 high byte  65536-1000
0x0216	0x758DFC  	MOV TH1, #252
;Drv.c,34 :: 		TL1 = 0x18;        // Reset Timer1 low byte
0x0219	0x758B18  	MOV TL1, #24
;Drv.c,35 :: 		TR1_bit = 1;       // Run Timer1
0x021C	0xD28E    	SETB TR1_bit
;Drv.c,39 :: 		P3=0xff;
0x021E	0x75B0FF  	MOV P3, #255
;Drv.c,40 :: 		EX0_bit = 1;
0x0221	0xD2A8    	SETB EX0_bit
;Drv.c,44 :: 		DelayMs(30);
0x0223	0x75111E  	MOV FARG_DelayMs_m, #30
0x0226	0x751200  	MOV FARG_DelayMs_m+1, #0
0x0229	0x119C    	ACALL _DelayMs
;Drv.c,45 :: 		RW = 0;
0x022B	0xC3      	CLR C
0x022C	0xE5B0    	MOV A, P3_5_bit
0x022E	0x92E5    	MOV #224.B5, C
0x0230	0xF5B0    	MOV P3_5_bit, A
;Drv.c,46 :: 		outcw(0x3C);
0x0232	0x75113C  	MOV FARG_outcw_c, #60
0x0235	0x11C3    	ACALL _outcw
;Drv.c,47 :: 		outcw(0x0C);
0x0237	0x75110C  	MOV FARG_outcw_c, #12
0x023A	0x11C3    	ACALL _outcw
;Drv.c,48 :: 		outcw(0x01);
0x023C	0x751101  	MOV FARG_outcw_c, #1
0x023F	0x11C3    	ACALL _outcw
;Drv.c,49 :: 		outcw(0x06);
0x0241	0x751106  	MOV FARG_outcw_c, #6
0x0244	0x11C3    	ACALL _outcw
;Drv.c,50 :: 		outcw(0x40);
0x0246	0x751140  	MOV FARG_outcw_c, #64
0x0249	0x11C3    	ACALL _outcw
;Drv.c,51 :: 		for(i=0;i<8;i++) outd(0);
0x024B	0x750A00  	MOV init_i_L0, #0
L_init0:
0x024E	0xC3      	CLR C
0x024F	0xE50A    	MOV A, init_i_L0
0x0251	0x9408    	SUBB A, #8
0x0253	0x5009    	JNC L_init1
0x0255	0x751100  	MOV FARG_outd_c, #0
0x0258	0x116D    	ACALL _outd
0x025A	0x050A    	INC init_i_L0
0x025C	0x80F0    	SJMP L_init0
L_init1:
;Drv.c,52 :: 		for(i=0;i<8;i++) outd(0x10);
0x025E	0x750A00  	MOV init_i_L0, #0
L_init3:
0x0261	0xC3      	CLR C
0x0262	0xE50A    	MOV A, init_i_L0
0x0264	0x9408    	SUBB A, #8
0x0266	0x5009    	JNC L_init4
0x0268	0x751110  	MOV FARG_outd_c, #16
0x026B	0x116D    	ACALL _outd
0x026D	0x050A    	INC init_i_L0
0x026F	0x80F0    	SJMP L_init3
L_init4:
;Drv.c,53 :: 		for(i=0;i<8;i++) outd(0x18);
0x0271	0x750A00  	MOV init_i_L0, #0
L_init6:
0x0274	0xC3      	CLR C
0x0275	0xE50A    	MOV A, init_i_L0
0x0277	0x9408    	SUBB A, #8
0x0279	0x5009    	JNC L_init7
0x027B	0x751118  	MOV FARG_outd_c, #24
0x027E	0x116D    	ACALL _outd
0x0280	0x050A    	INC init_i_L0
0x0282	0x80F0    	SJMP L_init6
L_init7:
;Drv.c,54 :: 		for(i=0;i<8;i++) outd(0x1C);
0x0284	0x750A00  	MOV init_i_L0, #0
L_init9:
0x0287	0xC3      	CLR C
0x0288	0xE50A    	MOV A, init_i_L0
0x028A	0x9408    	SUBB A, #8
0x028C	0x5009    	JNC L_init10
0x028E	0x75111C  	MOV FARG_outd_c, #28
0x0291	0x116D    	ACALL _outd
0x0293	0x050A    	INC init_i_L0
0x0295	0x80F0    	SJMP L_init9
L_init10:
;Drv.c,55 :: 		for(i=0;i<8;i++) outd(0x1E);
0x0297	0x750A00  	MOV init_i_L0, #0
L_init12:
0x029A	0xC3      	CLR C
0x029B	0xE50A    	MOV A, init_i_L0
0x029D	0x9408    	SUBB A, #8
0x029F	0x5009    	JNC L_init13
0x02A1	0x75111E  	MOV FARG_outd_c, #30
0x02A4	0x116D    	ACALL _outd
0x02A6	0x050A    	INC init_i_L0
0x02A8	0x80F0    	SJMP L_init12
L_init13:
;Drv.c,56 :: 		for(i=0;i<8;i++) outd(0x1F);
0x02AA	0x750A00  	MOV init_i_L0, #0
L_init15:
0x02AD	0xC3      	CLR C
0x02AE	0xE50A    	MOV A, init_i_L0
0x02B0	0x9408    	SUBB A, #8
0x02B2	0x5009    	JNC L_init16
0x02B4	0x75111F  	MOV FARG_outd_c, #31
0x02B7	0x116D    	ACALL _outd
0x02B9	0x050A    	INC init_i_L0
0x02BB	0x80F0    	SJMP L_init15
L_init16:
;Drv.c,57 :: 		}
0x02BD	0x22      	RET
; end of _init
___CC2D:
;__Lib_System.c,13 :: 		
;__Lib_System.c,15 :: 		
_CC2D_Loop1:
;__Lib_System.c,16 :: 		
0x02BE	0xE4      	CLR A
;__Lib_System.c,17 :: 		
0x02BF	0x93      	MOVC A, @A+DPTR
;__Lib_System.c,18 :: 		
0x02C0	0xF6      	MOV @R0, A
;__Lib_System.c,19 :: 		
0x02C1	0x08      	INC R0
;__Lib_System.c,20 :: 		
0x02C2	0xA3      	INC DPTR
;__Lib_System.c,21 :: 		
0x02C3	0xD9F9    	DJNZ R1, _CC2D_Loop1
;__Lib_System.c,23 :: 		
0x02C5	0x22      	RET
; end of ___CC2D
_getRandProg:
;mikroC project.c,46 :: 		int getRandProg() {
;mikroC project.c,47 :: 		return 1;
0x02C6	0x7801    	MOV R0, #1
0x02C8	0x7900    	MOV R1, #0
;mikroC project.c,48 :: 		}
0x02CA	0x22      	RET
; end of _getRandProg
_show:
;mikroC project.c,92 :: 		void show(char* str[], int len, char speed) {
;mikroC project.c,93 :: 		char i = 0;
0x02CB	0x750E00  	MOV show_i_L0, #0
0x02CE	0x750F08  	MOV show_j_L0, #8
0x02D1	0x751000  	MOV show_c_L0, #0
;mikroC project.c,94 :: 		char j = 8;
;mikroC project.c,95 :: 		char c = 0;
;mikroC project.c,96 :: 		while (i < len) {
L_show18:
0x02D4	0xC3      	CLR C
0x02D5	0xE50E    	MOV A, show_i_L0
0x02D7	0x950B    	SUBB A, FARG_show_len
0x02D9	0xE50C    	MOV A, FARG_show_len+1
0x02DB	0x6480    	XRL A, #128
0x02DD	0xF8      	MOV R0, A
0x02DE	0xE4      	CLR A
0x02DF	0x6480    	XRL A, #128
0x02E1	0x98      	SUBB A, R0
0x02E2	0x4002    	JC #2
0x02E4	0x615A    	AJMP L_show19
;mikroC project.c,97 :: 		c = str[i];
0x02E6	0xE50A    	MOV A, FARG_show_str
0x02E8	0x250E    	ADD A, show_i_L0
0x02EA	0xF8      	MOV R0, A
0x02EB	0x8610    	MOV show_c_L0, @R0
;mikroC project.c,98 :: 		j = 8;
0x02ED	0x750F08  	MOV show_j_L0, #8
;mikroC project.c,99 :: 		while (j > 0) {
L_show20:
0x02F0	0xD3      	SETB C
0x02F1	0xE50F    	MOV A, show_j_L0
0x02F3	0x9400    	SUBB A, #0
0x02F5	0x4057    	JC L_show21
;mikroC project.c,100 :: 		if (j & c) {
0x02F7	0xE50F    	MOV A, show_j_L0
0x02F9	0x5510    	ANL A, show_c_L0
0x02FB	0x6022    	JZ L_show22
;mikroC project.c,101 :: 		if (j == 1) D1 = 0;
0x02FD	0xE50F    	MOV A, show_j_L0
0x02FF	0x6401    	XRL A, #1
0x0301	0x7002    	JNZ L_show23
0x0303	0xC280    	CLR P0_0_bit
L_show23:
;mikroC project.c,102 :: 		if (j == 2) D2 = 0;
0x0305	0xE50F    	MOV A, show_j_L0
0x0307	0x6402    	XRL A, #2
0x0309	0x7002    	JNZ L_show24
0x030B	0xC281    	CLR P0_1_bit
L_show24:
;mikroC project.c,103 :: 		if (j == 4) D3 = 0;
0x030D	0xE50F    	MOV A, show_j_L0
0x030F	0x6404    	XRL A, #4
0x0311	0x7002    	JNZ L_show25
0x0313	0xC282    	CLR P0_2_bit
L_show25:
;mikroC project.c,104 :: 		if (j == 8) D4 = 0;
0x0315	0xE50F    	MOV A, show_j_L0
0x0317	0x6408    	XRL A, #8
0x0319	0x7002    	JNZ L_show26
0x031B	0xC283    	CLR P0_3_bit
L_show26:
;mikroC project.c,105 :: 		}
0x031D	0x8020    	SJMP L_show27
L_show22:
;mikroC project.c,107 :: 		if (j == 1) D1 = 1;
0x031F	0xE50F    	MOV A, show_j_L0
0x0321	0x6401    	XRL A, #1
0x0323	0x7002    	JNZ L_show28
0x0325	0xD280    	SETB P0_0_bit
L_show28:
;mikroC project.c,108 :: 		if (j == 2) D2 = 1;
0x0327	0xE50F    	MOV A, show_j_L0
0x0329	0x6402    	XRL A, #2
0x032B	0x7002    	JNZ L_show29
0x032D	0xD281    	SETB P0_1_bit
L_show29:
;mikroC project.c,109 :: 		if (j == 4) D3 = 1;
0x032F	0xE50F    	MOV A, show_j_L0
0x0331	0x6404    	XRL A, #4
0x0333	0x7002    	JNZ L_show30
0x0335	0xD282    	SETB P0_2_bit
L_show30:
;mikroC project.c,110 :: 		if (j == 8) D4 = 1;
0x0337	0xE50F    	MOV A, show_j_L0
0x0339	0x6408    	XRL A, #8
0x033B	0x7002    	JNZ L_show31
0x033D	0xD283    	SETB P0_3_bit
L_show31:
;mikroC project.c,111 :: 		}
L_show27:
;mikroC project.c,112 :: 		j >>= 1;
0x033F	0x7801    	MOV R0, #1
0x0341	0xE50F    	MOV A, show_j_L0
0x0343	0x08      	INC R0
0x0344	0x8002    	SJMP L__show96
L__show97:
0x0346	0xC3      	CLR C
0x0347	0x13      	RRC A
L__show96:
0x0348	0xD8FC    	DJNZ R0, L__show97
0x034A	0xF50F    	MOV show_j_L0, A
;mikroC project.c,113 :: 		}
0x034C	0x80A2    	SJMP L_show20
L_show21:
;mikroC project.c,115 :: 		delayMs(speed);
0x034E	0x850D11  	MOV FARG_DelayMs_m, FARG_show_speed+0
0x0351	0xE4      	CLR A
0x0352	0xF512    	MOV FARG_DelayMs_m+1, A
0x0354	0x119C    	ACALL _DelayMs
;mikroC project.c,116 :: 		i++;
0x0356	0x050E    	INC show_i_L0
;mikroC project.c,117 :: 		}
0x0358	0x41D4    	AJMP L_show18
L_show19:
;mikroC project.c,118 :: 		}
0x035A	0x22      	RET
; end of _show
_changeProgram:
;mikroC project.c,50 :: 		void changeProgram(unsigned char key) {
;mikroC project.c,51 :: 		if (key == 0) return;
0x035B	0xE50A    	MOV A, FARG_changeProgram_key
0x035D	0x7001    	JNZ L_changeProgram6
0x035F	0x22      	RET
L_changeProgram6:
;mikroC project.c,52 :: 		switch (key) {
0x0360	0x8048    	SJMP L_changeProgram7
;mikroC project.c,53 :: 		case '0':
L_changeProgram9:
;mikroC project.c,54 :: 		t = 2;
0x0362	0x755702  	MOV _t, #2
;mikroC project.c,55 :: 		zero_flag = 1;
0x0365	0x755601  	MOV _zero_flag, #1
;mikroC project.c,56 :: 		break;
0x0368	0x61E0    	AJMP L_changeProgram8
;mikroC project.c,57 :: 		case '1':
L_changeProgram10:
;mikroC project.c,58 :: 		state = p1s0;
0x036A	0x755501  	MOV _state, #1
;mikroC project.c,59 :: 		zero_flag = 0;
0x036D	0x755600  	MOV _zero_flag, #0
;mikroC project.c,60 :: 		break;
0x0370	0x61E0    	AJMP L_changeProgram8
;mikroC project.c,61 :: 		case '2':
L_changeProgram11:
;mikroC project.c,62 :: 		state = 2;
0x0372	0x755502  	MOV _state, #2
;mikroC project.c,63 :: 		zero_flag = 0;
0x0375	0x755600  	MOV _zero_flag, #0
;mikroC project.c,64 :: 		break;
0x0378	0x61E0    	AJMP L_changeProgram8
;mikroC project.c,65 :: 		case '3':
L_changeProgram12:
;mikroC project.c,66 :: 		state = 3;
0x037A	0x755503  	MOV _state, #3
;mikroC project.c,67 :: 		zero_flag = 0;
0x037D	0x755600  	MOV _zero_flag, #0
;mikroC project.c,68 :: 		break;
0x0380	0x805E    	SJMP L_changeProgram8
;mikroC project.c,69 :: 		case '4':
L_changeProgram13:
;mikroC project.c,70 :: 		state = 4;
0x0382	0x755504  	MOV _state, #4
;mikroC project.c,71 :: 		zero_flag = 0;
0x0385	0x755600  	MOV _zero_flag, #0
;mikroC project.c,72 :: 		break;
0x0388	0x8056    	SJMP L_changeProgram8
;mikroC project.c,73 :: 		case '5':
L_changeProgram14:
;mikroC project.c,74 :: 		state = 5;
0x038A	0x755505  	MOV _state, #5
;mikroC project.c,75 :: 		zero_flag = 0;
0x038D	0x755600  	MOV _zero_flag, #0
;mikroC project.c,76 :: 		break;
0x0390	0x804E    	SJMP L_changeProgram8
;mikroC project.c,77 :: 		case '6':
L_changeProgram15:
;mikroC project.c,78 :: 		state = 6;
0x0392	0x755506  	MOV _state, #6
;mikroC project.c,79 :: 		zero_flag = 0;
0x0395	0x755600  	MOV _zero_flag, #0
;mikroC project.c,80 :: 		break;
0x0398	0x8046    	SJMP L_changeProgram8
;mikroC project.c,81 :: 		case '7':
L_changeProgram16:
;mikroC project.c,82 :: 		state = 7;
0x039A	0x755507  	MOV _state, #7
;mikroC project.c,83 :: 		zero_flag = 0;
0x039D	0x755600  	MOV _zero_flag, #0
;mikroC project.c,84 :: 		break;
0x03A0	0x803E    	SJMP L_changeProgram8
;mikroC project.c,85 :: 		case '8':
L_changeProgram17:
;mikroC project.c,86 :: 		state = 8;
0x03A2	0x755508  	MOV _state, #8
;mikroC project.c,87 :: 		zero_flag = 0;
0x03A5	0x755600  	MOV _zero_flag, #0
;mikroC project.c,88 :: 		break;
0x03A8	0x8036    	SJMP L_changeProgram8
;mikroC project.c,89 :: 		}
L_changeProgram7:
0x03AA	0xE50A    	MOV A, FARG_changeProgram_key
0x03AC	0x6430    	XRL A, #48
0x03AE	0x60B2    	JZ L_changeProgram9
0x03B0	0xE50A    	MOV A, FARG_changeProgram_key
0x03B2	0x6431    	XRL A, #49
0x03B4	0x60B4    	JZ L_changeProgram10
0x03B6	0xE50A    	MOV A, FARG_changeProgram_key
0x03B8	0x6432    	XRL A, #50
0x03BA	0x60B6    	JZ L_changeProgram11
0x03BC	0xE50A    	MOV A, FARG_changeProgram_key
0x03BE	0x6433    	XRL A, #51
0x03C0	0x60B8    	JZ L_changeProgram12
0x03C2	0xE50A    	MOV A, FARG_changeProgram_key
0x03C4	0x6434    	XRL A, #52
0x03C6	0x60BA    	JZ L_changeProgram13
0x03C8	0xE50A    	MOV A, FARG_changeProgram_key
0x03CA	0x6435    	XRL A, #53
0x03CC	0x60BC    	JZ L_changeProgram14
0x03CE	0xE50A    	MOV A, FARG_changeProgram_key
0x03D0	0x6436    	XRL A, #54
0x03D2	0x60BE    	JZ L_changeProgram15
0x03D4	0xE50A    	MOV A, FARG_changeProgram_key
0x03D6	0x6437    	XRL A, #55
0x03D8	0x60C0    	JZ L_changeProgram16
0x03DA	0xE50A    	MOV A, FARG_changeProgram_key
0x03DC	0x6438    	XRL A, #56
0x03DE	0x60C2    	JZ L_changeProgram17
L_changeProgram8:
;mikroC project.c,90 :: 		}
0x03E0	0x22      	RET
; end of _changeProgram
_main:
0x03E1	0x758180  	MOV SP, #128
0x03E4	0x120643  	LCALL 1603
;mikroC project.c,120 :: 		void main() {
;mikroC project.c,121 :: 		init();
0x03E7	0x31DB    	ACALL _init
;mikroC project.c,122 :: 		clear_lcd();
0x03E9	0x31C2    	ACALL _clear_lcd
;mikroC project.c,124 :: 		while (1) {
L_main32:
;mikroC project.c,125 :: 		outd(state + '0');
0x03EB	0xE555    	MOV A, _state
0x03ED	0x2430    	ADD A, #48
0x03EF	0xF511    	MOV FARG_outd_c, A
0x03F1	0x116D    	ACALL _outd
;mikroC project.c,128 :: 		for (i = 1; i < 32; ++i) {
0x03F3	0x750801  	MOV main_i_L2, #1
0x03F6	0x750900  	MOV main_i_L2+1, #0
L_main34:
0x03F9	0xC3      	CLR C
0x03FA	0xE508    	MOV A, main_i_L2
0x03FC	0x9420    	SUBB A, #32
0x03FE	0x7400    	MOV A, #0
0x0400	0x6480    	XRL A, #128
0x0402	0xF8      	MOV R0, A
0x0403	0xE509    	MOV A, main_i_L2+1
0x0405	0x6480    	XRL A, #128
0x0407	0x98      	SUBB A, R0
0x0408	0x5013    	JNC L_main35
;mikroC project.c,129 :: 		outd(' ');
0x040A	0x751120  	MOV FARG_outd_c, #32
0x040D	0x116D    	ACALL _outd
;mikroC project.c,128 :: 		for (i = 1; i < 32; ++i) {
0x040F	0x7401    	MOV A, #1
0x0411	0x2508    	ADD A, main_i_L2
0x0413	0xF508    	MOV main_i_L2, A
0x0415	0x7400    	MOV A, #0
0x0417	0x3509    	ADDC A, main_i_L2+1
0x0419	0xF509    	MOV main_i_L2+1, A
;mikroC project.c,130 :: 		}
0x041B	0x80DC    	SJMP L_main34
L_main35:
;mikroC project.c,132 :: 		key = ScanKbd();
0x041D	0x311D    	ACALL _ScanKbd
0x041F	0x850053  	MOV _key, 0
;mikroC project.c,133 :: 		switch (state) {
0x0422	0xA194    	AJMP L_main37
;mikroC project.c,134 :: 		case p1s0:
L_main39:
;mikroC project.c,135 :: 		show(prog1, 4, speed);
0x0424	0x750A4F  	MOV FARG_show_str, lo_addr(_prog1)
0x0427	0x750B04  	MOV FARG_show_len, #4
0x042A	0x750C00  	MOV FARG_show_len+1, #0
0x042D	0x854D0D  	MOV FARG_show_speed, _speed+0
0x0430	0x51CB    	ACALL _show
;mikroC project.c,136 :: 		changeProgram(key);
0x0432	0x85530A  	MOV FARG_changeProgram_key, _key+0
0x0435	0x715B    	ACALL _changeProgram
;mikroC project.c,137 :: 		if (t > 0) t--;
0x0437	0xD3      	SETB C
0x0438	0xE557    	MOV A, _t
0x043A	0x9400    	SUBB A, #0
0x043C	0x4002    	JC L_main40
0x043E	0x1557    	DEC _t
L_main40:
;mikroC project.c,138 :: 		if ((t == 0) && (zero_flag)) {
0x0440	0xE557    	MOV A, _t
0x0442	0x700C    	JNZ L_main43
0x0444	0xE556    	MOV A, _zero_flag
0x0446	0x6008    	JZ L_main43
L__main94:
;mikroC project.c,139 :: 		t = 2;
0x0448	0x755702  	MOV _t, #2
;mikroC project.c,140 :: 		state = getRandProg();
0x044B	0x51C6    	ACALL _getRandProg
0x044D	0x850055  	MOV _state, 0
;mikroC project.c,141 :: 		}
L_main43:
;mikroC project.c,142 :: 		break;
0x0450	0xA1D4    	AJMP L_main38
;mikroC project.c,143 :: 		case p2s0:
L_main44:
;mikroC project.c,144 :: 		show(prog2, 4, speed);
0x0452	0x750A49  	MOV FARG_show_str, lo_addr(_prog2)
0x0455	0x750B04  	MOV FARG_show_len, #4
0x0458	0x750C00  	MOV FARG_show_len+1, #0
0x045B	0x854D0D  	MOV FARG_show_speed, _speed+0
0x045E	0x51CB    	ACALL _show
;mikroC project.c,145 :: 		changeProgram(key);
0x0460	0x85530A  	MOV FARG_changeProgram_key, _key+0
0x0463	0x715B    	ACALL _changeProgram
;mikroC project.c,146 :: 		if (t > 0) t--;
0x0465	0xD3      	SETB C
0x0466	0xE557    	MOV A, _t
0x0468	0x9400    	SUBB A, #0
0x046A	0x4002    	JC L_main45
0x046C	0x1557    	DEC _t
L_main45:
;mikroC project.c,147 :: 		if ((t == 0) && (zero_flag)) {
0x046E	0xE557    	MOV A, _t
0x0470	0x700C    	JNZ L_main48
0x0472	0xE556    	MOV A, _zero_flag
0x0474	0x6008    	JZ L_main48
L__main93:
;mikroC project.c,148 :: 		t = 2;
0x0476	0x755702  	MOV _t, #2
;mikroC project.c,149 :: 		state = getRandProg();
0x0479	0x51C6    	ACALL _getRandProg
0x047B	0x850055  	MOV _state, 0
;mikroC project.c,150 :: 		}
L_main48:
;mikroC project.c,151 :: 		break;
0x047E	0xA1D4    	AJMP L_main38
;mikroC project.c,152 :: 		case p3s0:
L_main49:
;mikroC project.c,153 :: 		show(prog3, 2, speed);
0x0480	0x750A47  	MOV FARG_show_str, lo_addr(_prog3)
0x0483	0x750B02  	MOV FARG_show_len, #2
0x0486	0x750C00  	MOV FARG_show_len+1, #0
0x0489	0x854D0D  	MOV FARG_show_speed, _speed+0
0x048C	0x51CB    	ACALL _show
;mikroC project.c,154 :: 		changeProgram(key);
0x048E	0x85530A  	MOV FARG_changeProgram_key, _key+0
0x0491	0x715B    	ACALL _changeProgram
;mikroC project.c,155 :: 		if (t > 0) t--;
0x0493	0xD3      	SETB C
0x0494	0xE557    	MOV A, _t
0x0496	0x9400    	SUBB A, #0
0x0498	0x4002    	JC L_main50
0x049A	0x1557    	DEC _t
L_main50:
;mikroC project.c,156 :: 		if ((t == 0) && (zero_flag)) {
0x049C	0xE557    	MOV A, _t
0x049E	0x700C    	JNZ L_main53
0x04A0	0xE556    	MOV A, _zero_flag
0x04A2	0x6008    	JZ L_main53
L__main92:
;mikroC project.c,157 :: 		t = 2;
0x04A4	0x755702  	MOV _t, #2
;mikroC project.c,158 :: 		state = getRandProg();
0x04A7	0x51C6    	ACALL _getRandProg
0x04A9	0x850055  	MOV _state, 0
;mikroC project.c,159 :: 		}
L_main53:
;mikroC project.c,160 :: 		break;
0x04AC	0xA1D4    	AJMP L_main38
;mikroC project.c,161 :: 		case p4s0:
L_main54:
;mikroC project.c,162 :: 		show(prog4, 8, speed);
0x04AE	0x750A3F  	MOV FARG_show_str, lo_addr(_prog4)
0x04B1	0x750B08  	MOV FARG_show_len, #8
0x04B4	0x750C00  	MOV FARG_show_len+1, #0
0x04B7	0x854D0D  	MOV FARG_show_speed, _speed+0
0x04BA	0x51CB    	ACALL _show
;mikroC project.c,163 :: 		changeProgram(key);
0x04BC	0x85530A  	MOV FARG_changeProgram_key, _key+0
0x04BF	0x715B    	ACALL _changeProgram
;mikroC project.c,164 :: 		if (t > 0) t--;
0x04C1	0xD3      	SETB C
0x04C2	0xE557    	MOV A, _t
0x04C4	0x9400    	SUBB A, #0
0x04C6	0x4002    	JC L_main55
0x04C8	0x1557    	DEC _t
L_main55:
;mikroC project.c,165 :: 		if ((t == 0) && (zero_flag)) {
0x04CA	0xE557    	MOV A, _t
0x04CC	0x700C    	JNZ L_main58
0x04CE	0xE556    	MOV A, _zero_flag
0x04D0	0x6008    	JZ L_main58
L__main91:
;mikroC project.c,166 :: 		t = 2;
0x04D2	0x755702  	MOV _t, #2
;mikroC project.c,167 :: 		state = getRandProg();
0x04D5	0x51C6    	ACALL _getRandProg
0x04D7	0x850055  	MOV _state, 0
;mikroC project.c,168 :: 		}
L_main58:
;mikroC project.c,169 :: 		break;
0x04DA	0xA1D4    	AJMP L_main38
;mikroC project.c,170 :: 		case p5s0:
L_main59:
;mikroC project.c,171 :: 		show(prog5, 8, speed);
0x04DC	0x750A37  	MOV FARG_show_str, lo_addr(_prog5)
0x04DF	0x750B08  	MOV FARG_show_len, #8
0x04E2	0x750C00  	MOV FARG_show_len+1, #0
0x04E5	0x854D0D  	MOV FARG_show_speed, _speed+0
0x04E8	0x51CB    	ACALL _show
;mikroC project.c,172 :: 		changeProgram(key);
0x04EA	0x85530A  	MOV FARG_changeProgram_key, _key+0
0x04ED	0x715B    	ACALL _changeProgram
;mikroC project.c,173 :: 		if (t > 0) t--;
0x04EF	0xD3      	SETB C
0x04F0	0xE557    	MOV A, _t
0x04F2	0x9400    	SUBB A, #0
0x04F4	0x4002    	JC L_main60
0x04F6	0x1557    	DEC _t
L_main60:
;mikroC project.c,174 :: 		if ((t == 0) && (zero_flag)) {
0x04F8	0xE557    	MOV A, _t
0x04FA	0x700C    	JNZ L_main63
0x04FC	0xE556    	MOV A, _zero_flag
0x04FE	0x6008    	JZ L_main63
L__main90:
;mikroC project.c,175 :: 		t = 2;
0x0500	0x755702  	MOV _t, #2
;mikroC project.c,176 :: 		state = getRandProg();
0x0503	0x51C6    	ACALL _getRandProg
0x0505	0x850055  	MOV _state, 0
;mikroC project.c,177 :: 		}
L_main63:
;mikroC project.c,178 :: 		break;
0x0508	0xA1D4    	AJMP L_main38
;mikroC project.c,179 :: 		case p6s0:
L_main64:
;mikroC project.c,180 :: 		show(prog6, 2, speed);
0x050A	0x750A35  	MOV FARG_show_str, lo_addr(_prog6)
0x050D	0x750B02  	MOV FARG_show_len, #2
0x0510	0x750C00  	MOV FARG_show_len+1, #0
0x0513	0x854D0D  	MOV FARG_show_speed, _speed+0
0x0516	0x51CB    	ACALL _show
;mikroC project.c,181 :: 		changeProgram(key);
0x0518	0x85530A  	MOV FARG_changeProgram_key, _key+0
0x051B	0x715B    	ACALL _changeProgram
;mikroC project.c,182 :: 		if (t > 0) t--;
0x051D	0xD3      	SETB C
0x051E	0xE557    	MOV A, _t
0x0520	0x9400    	SUBB A, #0
0x0522	0x4002    	JC L_main65
0x0524	0x1557    	DEC _t
L_main65:
;mikroC project.c,183 :: 		if ((t == 0) && (zero_flag)) {
0x0526	0xE557    	MOV A, _t
0x0528	0x700C    	JNZ L_main68
0x052A	0xE556    	MOV A, _zero_flag
0x052C	0x6008    	JZ L_main68
L__main89:
;mikroC project.c,184 :: 		t = 2;
0x052E	0x755702  	MOV _t, #2
;mikroC project.c,185 :: 		state = getRandProg();
0x0531	0x51C6    	ACALL _getRandProg
0x0533	0x850055  	MOV _state, 0
;mikroC project.c,186 :: 		}
L_main68:
;mikroC project.c,187 :: 		break;
0x0536	0xA1D4    	AJMP L_main38
;mikroC project.c,188 :: 		case p7s0:
L_main69:
;mikroC project.c,189 :: 		show(prog7, 2, speed);
0x0538	0x750A33  	MOV FARG_show_str, lo_addr(_prog7)
0x053B	0x750B02  	MOV FARG_show_len, #2
0x053E	0x750C00  	MOV FARG_show_len+1, #0
0x0541	0x854D0D  	MOV FARG_show_speed, _speed+0
0x0544	0x51CB    	ACALL _show
;mikroC project.c,190 :: 		changeProgram(key);
0x0546	0x85530A  	MOV FARG_changeProgram_key, _key+0
0x0549	0x715B    	ACALL _changeProgram
;mikroC project.c,191 :: 		if (t > 0) t--;
0x054B	0xD3      	SETB C
0x054C	0xE557    	MOV A, _t
0x054E	0x9400    	SUBB A, #0
0x0550	0x4002    	JC L_main70
0x0552	0x1557    	DEC _t
L_main70:
;mikroC project.c,192 :: 		if ((t == 0) && (zero_flag)) {
0x0554	0xE557    	MOV A, _t
0x0556	0x700C    	JNZ L_main73
0x0558	0xE556    	MOV A, _zero_flag
0x055A	0x6008    	JZ L_main73
L__main88:
;mikroC project.c,193 :: 		t = 2;
0x055C	0x755702  	MOV _t, #2
;mikroC project.c,194 :: 		state = getRandProg();
0x055F	0x51C6    	ACALL _getRandProg
0x0561	0x850055  	MOV _state, 0
;mikroC project.c,195 :: 		}
L_main73:
;mikroC project.c,196 :: 		break;
0x0564	0xA1D4    	AJMP L_main38
;mikroC project.c,197 :: 		case p8s0:
L_main74:
;mikroC project.c,198 :: 		show(prog8, 3, speed);
0x0566	0x750A30  	MOV FARG_show_str, lo_addr(_prog8)
0x0569	0x750B03  	MOV FARG_show_len, #3
0x056C	0x750C00  	MOV FARG_show_len+1, #0
0x056F	0x854D0D  	MOV FARG_show_speed, _speed+0
0x0572	0x51CB    	ACALL _show
;mikroC project.c,199 :: 		changeProgram(key);
0x0574	0x85530A  	MOV FARG_changeProgram_key, _key+0
0x0577	0x715B    	ACALL _changeProgram
;mikroC project.c,200 :: 		if (t > 0) t--;
0x0579	0xD3      	SETB C
0x057A	0xE557    	MOV A, _t
0x057C	0x9400    	SUBB A, #0
0x057E	0x4002    	JC L_main75
0x0580	0x1557    	DEC _t
L_main75:
;mikroC project.c,201 :: 		if ((t == 0) && (zero_flag)) {
0x0582	0xE557    	MOV A, _t
0x0584	0x700C    	JNZ L_main78
0x0586	0xE556    	MOV A, _zero_flag
0x0588	0x6008    	JZ L_main78
L__main87:
;mikroC project.c,202 :: 		t = 2;
0x058A	0x755702  	MOV _t, #2
;mikroC project.c,203 :: 		state = getRandProg();
0x058D	0x51C6    	ACALL _getRandProg
0x058F	0x850055  	MOV _state, 0
;mikroC project.c,204 :: 		}
L_main78:
;mikroC project.c,205 :: 		break;
0x0592	0x8040    	SJMP L_main38
;mikroC project.c,206 :: 		}
L_main37:
0x0594	0xE555    	MOV A, _state
0x0596	0x6401    	XRL A, #1
0x0598	0x7002    	JNZ #2
0x059A	0x8124    	AJMP L_main39
0x059C	0xE555    	MOV A, _state
0x059E	0x6402    	XRL A, #2
0x05A0	0x7002    	JNZ #2
0x05A2	0x8152    	AJMP L_main44
0x05A4	0xE555    	MOV A, _state
0x05A6	0x6403    	XRL A, #3
0x05A8	0x7002    	JNZ #2
0x05AA	0x8180    	AJMP L_main49
0x05AC	0xE555    	MOV A, _state
0x05AE	0x6404    	XRL A, #4
0x05B0	0x7002    	JNZ #2
0x05B2	0x81AE    	AJMP L_main54
0x05B4	0xE555    	MOV A, _state
0x05B6	0x6405    	XRL A, #5
0x05B8	0x7002    	JNZ #2
0x05BA	0x81DC    	AJMP L_main59
0x05BC	0xE555    	MOV A, _state
0x05BE	0x6406    	XRL A, #6
0x05C0	0x7002    	JNZ #2
0x05C2	0xA10A    	AJMP L_main64
0x05C4	0xE555    	MOV A, _state
0x05C6	0x6407    	XRL A, #7
0x05C8	0x7002    	JNZ #2
0x05CA	0xA138    	AJMP L_main69
0x05CC	0xE555    	MOV A, _state
0x05CE	0x6408    	XRL A, #8
0x05D0	0x7002    	JNZ #2
0x05D2	0xA166    	AJMP L_main74
L_main38:
;mikroC project.c,207 :: 		if ((key == key_up) && (speed > 100)) {
0x05D4	0xE553    	MOV A, _key
0x05D6	0x6465    	XRL A, #101
0x05D8	0x7018    	JNZ L_main81
0x05DA	0xD3      	SETB C
0x05DB	0xE54D    	MOV A, _speed
0x05DD	0x9464    	SUBB A, #100
0x05DF	0xE54E    	MOV A, _speed+1
0x05E1	0x9400    	SUBB A, #0
0x05E3	0x400D    	JC L_main81
L__main86:
;mikroC project.c,208 :: 		speed -= 100;
0x05E5	0xC3      	CLR C
0x05E6	0xE54D    	MOV A, _speed
0x05E8	0x9464    	SUBB A, #100
0x05EA	0xF54D    	MOV _speed, A
0x05EC	0xE54E    	MOV A, _speed+1
0x05EE	0x9400    	SUBB A, #0
0x05F0	0xF54E    	MOV _speed+1, A
;mikroC project.c,209 :: 		}
L_main81:
;mikroC project.c,210 :: 		if ((key == key_down) && (speed < 1000)) {
0x05F2	0xE553    	MOV A, _key
0x05F4	0x6423    	XRL A, #35
0x05F6	0x7017    	JNZ L_main84
0x05F8	0xC3      	CLR C
0x05F9	0xE54D    	MOV A, _speed
0x05FB	0x94E8    	SUBB A, #232
0x05FD	0xE54E    	MOV A, _speed+1
0x05FF	0x9403    	SUBB A, #3
0x0601	0x500C    	JNC L_main84
L__main85:
;mikroC project.c,211 :: 		speed += 100;
0x0603	0x7464    	MOV A, #100
0x0605	0x254D    	ADD A, _speed
0x0607	0xF54D    	MOV _speed, A
0x0609	0x7400    	MOV A, #0
0x060B	0x354E    	ADDC A, _speed+1
0x060D	0xF54E    	MOV _speed+1, A
;mikroC project.c,212 :: 		}
L_main84:
;mikroC project.c,213 :: 		delayMs(speed);
0x060F	0x854D11  	MOV FARG_DelayMs_m, _speed+0
0x0612	0x854E12  	MOV FARG_DelayMs_m+1, _speed+1
0x0615	0x119C    	ACALL _DelayMs
;mikroC project.c,214 :: 		}
0x0617	0x61EB    	AJMP L_main32
;mikroC project.c,215 :: 		}
0x0619	0x80FE    	SJMP #254
; end of _main
0x0643	0x7830    	MOV R0, 48
0x0645	0x7928    	MOV R1, 40
0x0647	0x75821B  	MOV DP0L, 27
0x064A	0x758306  	MOV DP0H, 6
0x064D	0x1202BE  	LCALL 702
0x0650	0x22      	RET
;mikroC project.c,0 :: ?ICS_prog8
0x061B	0x0C0603 ;?ICS_prog8+0
; end of ?ICS_prog8
;mikroC project.c,0 :: ?ICS_prog7
0x061E	0x0C03 ;?ICS_prog7+0
; end of ?ICS_prog7
;mikroC project.c,0 :: ?ICS_prog6
0x0620	0x0906 ;?ICS_prog6+0
; end of ?ICS_prog6
;mikroC project.c,0 :: ?ICS_prog5
0x0622	0x000103 ;?ICS_prog5+0
0x0625	0x070F07 ;?ICS_prog5+3
0x0628	0x0301 ;?ICS_prog5+6
; end of ?ICS_prog5
;mikroC project.c,0 :: ?ICS_prog4
0x062A	0x00080C ;?ICS_prog4+0
0x062D	0x0E0F0E ;?ICS_prog4+3
0x0630	0x0C08 ;?ICS_prog4+6
; end of ?ICS_prog4
;mikroC project.c,0 :: ?ICS_prog3
0x0632	0x050A ;?ICS_prog3+0
; end of ?ICS_prog3
;mikroC project.c,0 :: ?ICS_prog2
0x0634	0x010204 ;?ICS_prog2+0
0x0637	0x08 ;?ICS_prog2+3
; end of ?ICS_prog2
;mikroC project.c,0 :: ?ICS_speed
0x0638	0x6400 ;?ICS_speed+0
; end of ?ICS_speed
;mikroC project.c,0 :: ?ICS_prog1
0x063A	0x080402 ;?ICS_prog1+0
0x063D	0x01 ;?ICS_prog1+3
; end of ?ICS_prog1
;mikroC project.c,0 :: ?ICS_key
0x063E	0x00 ;?ICS_key+0
; end of ?ICS_key
;mikroC project.c,0 :: ?ICS_ms
0x063F	0x00 ;?ICS_ms+0
; end of ?ICS_ms
;mikroC project.c,0 :: ?ICS_state
0x0640	0x01 ;?ICS_state+0
; end of ?ICS_state
;mikroC project.c,0 :: ?ICS_zero_flag
0x0641	0x00 ;?ICS_zero_flag+0
; end of ?ICS_zero_flag
;mikroC project.c,0 :: ?ICS_t
0x0642	0x00 ;?ICS_t+0
; end of ?ICS_t
Symbol List:
//** Routines locations **
//ADDRESS    SIZE    PROCEDURE
//----------------------------------------------
0x0026      [71]    _translate
0x006D      [47]    _outd
0x009C      [39]    _DelayMs
0x00C3      [90]    _outcw
0x011D     [165]    _ScanKbd
0x01C2      [25]    _clear_lcd
0x01DB     [227]    _init
0x02BE       [8]    ___CC2D
0x02C6       [5]    _getRandProg
0x02CB     [144]    _show
0x035B     [134]    _changeProgram
0x03E1     [570]    _main
//** Variables locations ** 
//ADDRESS    SIZE    VARIABLE
//----------------------------------------------
0x0000       [1]    R0
0x0001       [1]    R1
0x0002       [1]    R2
0x0003       [1]    R3
0x0004       [1]    R4
0x0005       [1]    R5
0x0006       [1]    R6
0x0007       [1]    R7
0x0008       [2]    main_i_L2
0x000A       [1]    FARG_changeProgram_key
0x000A       [1]    FARG_show_str
0x000A       [1]    init_i_L0
0x000A       [1]    ScanKbd_kp_L0
0x000A       [1]    clear_lcd_i_L0
0x000B       [1]    ScanKbd_i_L0
0x000B       [2]    FARG_show_len
0x000D       [1]    FARG_show_speed
0x000E       [1]    show_i_L0
0x000F       [1]    show_j_L0
0x0010       [1]    show_c_L0
0x0011       [1]    FARG_outcw_c
0x0011       [1]    FARG_outd_c
0x0011       [2]    FARG_DelayMs_m
0x0012       [1]    outd_i_L0
0x0012       [1]    outcw_i_L0
0x0013       [2]    outcw_j_L0
0x0013       [1]    DelayMs_a_L0
0x0015       [1]    FARG_translate_c
0x0030       [3]    _prog8
0x0033       [2]    _prog7
0x0035       [2]    _prog6
0x0037       [8]    _prog5
0x003F       [8]    _prog4
0x0047       [2]    _prog3
0x0049       [4]    _prog2
0x004D       [2]    _speed
0x004F       [4]    _prog1
0x0053       [1]    _key
0x0054       [1]    _ms
0x0055       [1]    _state
0x0056       [1]    _zero_flag
0x0057       [1]    _t
0x0080       [0]    P0_2_bit
0x0080       [0]    P0_1_bit
0x0080       [0]    P0_3_bit
0x0080       [1]    P0
0x0080       [0]    P0_0_bit
0x0081       [1]    SP
0x0082       [1]    DPL
0x0083       [1]    DPH
0x0087       [1]    PCON
0x0088       [0]    TF1_bit
0x0088       [0]    TR1_bit
0x0089       [0]    C_T1_bit
0x0089       [0]    M11_bit
0x0089       [1]    TMOD
0x0089       [0]    GATE1_bit
0x0089       [0]    M01_bit
0x008B       [1]    TL1
0x008D       [1]    TH1
0x0090       [0]    P1_1_bit
0x0090       [0]    P1_0_bit
0x0090       [0]    P1_3_bit
0x0090       [0]    P1_2_bit
0x0096       [1]    WMCON
0x0098       [1]    SCON
0x00A0       [1]    P2
0x00A8       [0]    EX0_bit
0x00A8       [0]    EA_bit
0x00A8       [0]    ET1_bit
0x00A8       [0]    ES_bit
0x00B0       [0]    P3_5_bit
0x00B0       [0]    P3_6_bit
0x00B0       [0]    P3_7_bit
0x00B0       [1]    P3
0x00D0       [1]    PSW
0x00E0       [1]    ACC
0x00F0       [1]    B
//** Constants locations ** 
//ADDRESS    SIZE    CONSTANT
//----------------------------------------------
0x061B       [3]    ?ICS_prog8
0x061E       [2]    ?ICS_prog7
0x0620       [2]    ?ICS_prog6
0x0622       [8]    ?ICS_prog5
0x062A       [8]    ?ICS_prog4
0x0632       [2]    ?ICS_prog3
0x0634       [4]    ?ICS_prog2
0x0638       [2]    ?ICS_speed
0x063A       [4]    ?ICS_prog1
0x063E       [1]    ?ICS_key
0x063F       [1]    ?ICS_ms
0x0640       [1]    ?ICS_state
0x0641       [1]    ?ICS_zero_flag
0x0642       [1]    ?ICS_t
//** Label List: ** 
//----------------------------------------------
  L_init0
  L_init1
  L_init2
  L_init3
  L_init4
  L_init5
  L_init6
  L_init7
  L_init8
  L_init9
  L_init10
  L_init11
  L_init12
  L_init13
  L_init14
  L_init15
  L_init16
  L_init17
  L_ScanKbd18
  L_ScanKbd19
  L_ScanKbd20
  L_ScanKbd21
  L_ScanKbd22
  L_ScanKbd23
  L_ScanKbd24
  L_ScanKbd25
  L_ScanKbd26
  L_ScanKbd27
  L_ScanKbd28
  L_ScanKbd29
  L_ScanKbd30
  L_ScanKbd31
  L_ScanKbd32
  L_ScanKbd33
  L_ScanKbd34
  L_ScanKbd35
  L_ScanKbd36
  L_ScanKbd37
  L_ScanKbd38
  L_ScanKbd39
  L_ScanKbd40
  L_ScanKbd41
  L_ScanKbd42
  L_ScanKbd43
  L_ScanKbd44
  L_ScanKbd45
  L_ScanKbd46
  L_ScanKbd47
  L_translate48
  L_translate49
  L_translate50
  L_translate51
  L_translate52
  L_translate53
  L_translate54
  L_translate55
  L_translate56
  L_translate57
  L_clear_lcd58
  L_clear_lcd59
  L_clear_lcd60
  L_outcw61
  L_outcw62
  L_outcw63
  L_outcw64
  L_outcw65
  L_outcw66
  L_outcw67
  L_outcw68
  L_outcw69
  L_outd70
  L_outd71
  L_outd72
  L__outcw73
  _init
  _ScanKbd
  _translate
  _wr_EEPROM
  _rd_EEPROM
  _clear_lcd
  _outcw
  _outd
  L_DelayMs0
  L_DelayMs1
  L_DelayMs2
  L_DelayMs3
  L_DelayMs4
  L_DelayMs5
  L_changeProgram6
  L_changeProgram7
  L_changeProgram8
  L_changeProgram9
  L_changeProgram10
  L_changeProgram11
  L_changeProgram12
  L_changeProgram13
  L_changeProgram14
  L_changeProgram15
  L_changeProgram16
  L_changeProgram17
  L_show18
  L_show19
  L_show20
  L_show21
  L_show22
  L_show23
  L_show24
  L_show25
  L_show26
  L_show27
  L_show28
  L_show29
  L_show30
  L_show31
  L_main32
  L_main33
  L_main34
  L_main35
  L_main36
  L_main37
  L_main38
  L_main39
  L_main40
  L_main41
  L_main42
  L_main43
  L_main44
  L_main45
  L_main46
  L_main47
  L_main48
  L_main49
  L_main50
  L_main51
  L_main52
  L_main53
  L_main54
  L_main55
  L_main56
  L_main57
  L_main58
  L_main59
  L_main60
  L_main61
  L_main62
  L_main63
  L_main64
  L_main65
  L_main66
  L_main67
  L_main68
  L_main69
  L_main70
  L_main71
  L_main72
  L_main73
  L_main74
  L_main75
  L_main76
  L_main77
  L_main78
  L_main79
  L_main80
  L_main81
  L_main82
  L_main83
  L_main84
  L__main85
  L__main86
  L__main87
  L__main88
  L__main89
  L__main90
  L__main91
  L__main92
  L__main93
  L__main94
  _DelayMs
  L__DelayMs95
  _getRandProg
  _changeProgram
  _show
  L__show96
  L__show97
  _main
  _CC2D_Loop1
  _CC2PD_Loop1
  _CC2XD_Loop1
  ___DoIFC
  ___CC2D
  ___CC2PD
  ___CC2XD
