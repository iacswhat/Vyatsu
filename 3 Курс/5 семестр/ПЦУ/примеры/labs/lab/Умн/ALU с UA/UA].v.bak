// WARNING: Do NOT edit the input and output ports in this file in a text
// editor if you plan to continue editing the block that represents it in
// the Block Editor! File corruption is VERY likely to occur.

// Copyright (C) 1991-2010 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.


// Generated by Quartus II Version 9.1 (Build Build 350 03/24/2010)
// Created on Tue Oct 31 14:50:32 2017

//  Module Declaration
module block_name
(
	// {{ALTERA_ARGS_BEGIN}} DO NOT REMOVE THIS LINE!
	clk, p, Mode, XX, res, Z, y, clkout
	// {{ALTERA_ARGS_END}} DO NOT REMOVE THIS LINE!
);
// Port Declaration

	// {{ALTERA_IO_BEGIN}} DO NOT REMOVE THIS LINE!
	input clk;
	input [10:0] p;
	input [1:0] Mode;
	input XX;
	input res;
	input Z;
	output [27:0] y;
	output clkout;
	// {{ALTERA_IO_END}} DO NOT REMOVE THIS LINE!
integer pc=1;
reg [27:0] y;
wire clkout;
integer QQ=1;
assign clkout=!clk;
always @(posedge clk)
begin
y=27'b000000000000000000000000000;
if (res==1) begin pc=1; end;
case (pc)
1:begin
if (XX) begin y[0]=1; y[5]=1; y[18]=1; y[22]=1; pc=2; end;
end
2:begin
if (Mode[1]&&Mode[0]) begin 
	if (p[1]) begin y[6]=1; y[14]=1; y[19]=1; pc=pc+1; end;
	if (!p[1]) begin y[6]=1; y[19]=1; pc=pc+1; end; end;
if (Mode[1]&&!Mode[0]) begin y[6]=1; y[14]=1; y[19]=1; pc=pc+1; end;
end
3:begin
if (XX) begin y[0]=1; pc=4; end;
end
4:begin
if (p[0]) begin pc=16; end;
if (!p[0]&&p[8]) begin pc=18; end;
if (!p[0]&&!p[8]) begin y[4]=1; y[6]=1; pc=pc+1; end;
end
5:begin
if (!p[6]) begin y[9]=1; y[11]=1;  pc=pc+1; end;
if (p[6]) begin y[6]=1; pc=16; end;
end
6:begin
if (p[3]) begin y[6]=1; pc=16; end;
if (!p[3]) begin y[10]=1; pc=pc+1; end;
end
7:begin
if (p[3]) begin pc=pc+1; end;
if (!p[3]) begin y[5]=1; y[18]=1; pc=19; end;
end
8:begin //M
y[11]=1;
pc=pc+1;
end
9:begin
if (p[4]) begin pc=pc+1; end;
if (!p[4]&&p[3]) begin y[2]=1; y[8]=1; y[12]=1; y[16]=1; pc=pc-1; end;
if (!p[4]&&!p[3]) begin y[7]=1; y[20]=1; pc=pc-1; end;
end
10:begin //AS
if (Mode[0]) begin y[12]=1; y[20]=1; y[7]=1; y[16]=1; end;
pc=pc+1; 
end
11:begin
	if (!p[1]&&Mode[0]) begin y[6]=1; y[19]=1; pc=pc+1; end;
	if (p[1]||!Mode[0]) begin y[6]=1; y[19]=1; y[14]=1; pc=pc+1; end;
end
12:begin //De
if (p[9]) begin y[5]=1; pc=15; end;
if (!p[9]) begin pc=pc+1; end;
end
13:begin
if (p[8]) begin y[8]=1; y[21]=1; end;
if (!p[8]&&p[6]) begin pc=pc+1; end;
if (!p[8]&&!p[6]) begin pc=pc+3; end;
end
14:begin //PRS
y[25]=1; pc=1;
end
15:begin //Res
y[24]=1;
pc=pc+1;
end
16:begin //Res1
y[26]=1;
pc=pc+1;
end
17:begin
if (Z) begin y[27]=1; pc=0; end;
end
18:begin //TWO
if (!Mode[0]) begin y[6]=1; y[14]=1; y[19]=1; pc=16; end;
if (Mode[0]) begin
if (p[1]) begin y[6]=1; y[14]=1; y[19]=1; pc=16; end;
if (!p[1]) begin pc=pc+1; end; end;
end
19:begin //N
y[6]=1; y[19]=1; pc=16;
end
endcase
end
endmodule
